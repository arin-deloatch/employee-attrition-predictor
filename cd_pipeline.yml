name: CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.9"

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
          pip install sagemaker boto3 jq  # Ensure required dependencies

      - name: Configure AWS for CI/CD
        run: |
          set -e  # Exit on failure

          echo "Setting AWS credentials..."
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ secrets.AWS_DEFAULT_REGION }}"

          # Ensure AWS CLI recognizes credentials
          aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
          aws configure set region "$AWS_DEFAULT_REGION"

          # Confirm credentials are set
          if [[ -z "$AWS_ACCESS_KEY_ID" || -z "$AWS_SECRET_ACCESS_KEY" ]]; then
            echo "❌ ERROR: AWS credentials are not set in GitHub Secrets."
            exit 1
          fi

          echo "✅ AWS credentials set successfully."

      - name: Debug SageMaker Default Bucket
        run: |
          set -e  # Exit on failure
          echo "🔍 Checking available S3 buckets..."
          aws s3 ls  # This should now work if credentials are correct
          
          echo "🔍 Checking SageMaker default bucket..."
          python -c "import sagemaker; print(sagemaker.Session().default_bucket())"

      - name: Get User's SageMaker Default Bucket
        run: |
          set -e  # Exit on failure
          
          # Extract the bucket name while filtering out unwanted logs
          export SAGEMAKER_DEFAULT_BUCKET=$(python -c "import sagemaker; print(sagemaker.Session().default_bucket())" | tail -n 1)

          if [[ -z "$SAGEMAKER_DEFAULT_BUCKET" ]]; then
            echo "❌ ERROR: SageMaker default bucket could not be determined."
            exit 1
          fi

          echo "SAGEMAKER_DEFAULT_BUCKET=$SAGEMAKER_DEFAULT_BUCKET" >> $GITHUB_ENV
          echo "✅ Using S3 Bucket: $SAGEMAKER_DEFAULT_BUCKET"

      - name: Retrieve Model URL from S3
        run: |
          set -e  # Exit on failure

          echo "🔍 Fetching model URL from S3..."
          aws s3 cp s3://$SAGEMAKER_DEFAULT_BUCKET/model/model_url.txt model_url.txt

          export MODEL_URL=$(cat model_url.txt)
          if [[ -z "$MODEL_URL" ]]; then
            echo "❌ ERROR: Model URL is empty or not found in S3."
            exit 1
          fi

          echo "MODEL_URL=$MODEL_URL" >> $GITHUB_ENV
          echo "✅ Using Model URL: $MODEL_URL"

      - name: Deploy Model to SageMaker
        run: |
          set -e  # Exit on failure
          echo "🚀 Deploying model to SageMaker..."
          python ci_cd/deploy_model.py

      - name: Extract Model Name for Endpoint Check
        run: |
          set -e
          MODEL_NAME=$(ls -t ci_cd/ | grep "retainai-xgboost" | head -n 1 | sed 's/.tar.gz//')
          echo "MODEL_NAME=$MODEL_NAME" >> $GITHUB_ENV
          echo "✅ Extracted Model Name: $MODEL_NAME"

      - name: Check SageMaker Endpoint Status
        run: |
          set -e
          echo "🔍 Checking SageMaker Endpoint Status..."
          endpoint_status=$(aws sagemaker describe-endpoint --endpoint-name $MODEL_NAME | jq -r '.EndpointStatus')
          if [[ "$endpoint_status" != "InService" ]]; then
            echo "❌ ERROR: SageMaker endpoint is not active! Status: $endpoint_status"
            exit 1
          fi
          echo "✅ SageMaker endpoint is active!"

      - name: Run Model Inference Test
        run: |
          set -e
          echo "🔍 Sending a test request to the SageMaker endpoint..."
          response=$(aws sagemaker-runtime invoke-endpoint \
            --endpoint-name $MODEL_NAME \
            --body '{"instances": [[5.1, 3.5, 1.4, 0.2]]}' \
            --content-type application/json \
            output.json)
          echo "✅ Model response received!"
          cat output.json
